---
description: CSV Image Checker tool development and maintenance guidelines
globs: csv-checker.html
---

# CSV Image Checker - Standalone Tool Rules

The [csv-checker.html](mdc:csv-checker.html) is a **standalone HTML tool** for reviewing and editing CSV files generated by the Net2Sheet Chrome extension.

## Tool Overview
- **Purpose**: Visual inspection and editing of Net2Sheet CSV output files
- **Architecture**: Single-file HTML application with embedded CSS and JavaScript
- **Target Users**: Content managers and developers who need to review collected image data

## Key Features Implementation

### 1. CSV File Processing
```javascript
// CSV parsing with RFC 4180 compliance
function parseCSV(csvText) {
  // Handle quoted fields and escaped quotes
  // Skip header row detection: "„Éï„Ç°„Ç§„É´Âêç" or "Filename"
}

// Expected input format from Net2Sheet
"„Éï„Ç°„Ç§„É´Âêç","URL"
"image1.jpg","https://example.com/images/image1.jpg"
```

### 2. Image Grid Display
```css
.image-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 1.5rem;
}

.image-card {
  background: white;
  border-radius: 10px;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}
```

### 3. Real-time Statistics
```javascript
// Track counts automatically
function updateStats() {
  const total = imageData.length;
  const excluded = imageData.filter(img => img.excluded).length;
  const valid = total - excluded;
}
```

## UI/UX Design Principles

### Japanese-First Interface
- All UI text in Japanese with emoji icons for visual clarity
- Consistent terminology: ÂèéÈõÜ, Èô§Â§ñ, „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
- Error messages should be user-friendly and in Japanese

### Responsive Grid Layout
```css
@media (max-width: 768px) {
  .image-grid {
    grid-template-columns: 1fr; /* Single column on mobile */
  }
}
```

### Accessibility Standards
- Semantic HTML elements (`<label>`, `<input>`, `<button>`)
- Proper keyboard navigation support
- Clear visual focus indicators
- Screen reader friendly structure

## Data Management Patterns

### State Management
```javascript
// Global state object pattern
let imageData = [];  // Array of {id, originalName, editedName, url, excluded}

// Real-time updates
nameInput.addEventListener('input', (e) => {
  const imgItem = imageData.find(item => item.id === imgId);
  imgItem.editedName = e.target.value;
});
```

### CSV Export Format
```javascript
// Maintain Net2Sheet compatibility
function generateCSV(images) {
  const headers = ["„Éï„Ç°„Ç§„É´Âêç", "URL"];
  // RFC 4180 compliant escaping
  return rows.map(row => 
    row.map(value => `"${(value || "").replace(/"/g, '""')}"`)
       .join(",")
  ).join("\n");
}
```

## Error Handling Strategy

### File Upload Validation
```javascript
// Validate file type and content
if (!file.name.toLowerCase().endsWith('.csv')) {
  showError("CSV„Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ");
  return;
}
```

### Image Loading Fallbacks
```javascript
// Handle CORS and loading errors gracefully
<img onerror="this.className='image-preview error'; this.innerHTML='üñºÔ∏è ÁîªÂÉè„ÇíË™≠„ÅøËæº„ÇÅ„Åæ„Åõ„Çì';" />
```

### User Feedback
```javascript
// Temporary notification system
function showError(message) {
  // Auto-remove after 5 seconds
  setTimeout(() => error.remove(), 5000);
}
```

## Performance Considerations

### Large Dataset Handling
- Grid virtualization for 1000+ images (future enhancement)
- Lazy loading of image previews
- Debounced search/filter inputs

### Memory Management
```javascript
// Clean up object URLs to prevent memory leaks
URL.revokeObjectURL(url);
```

## File Structure Standards

### Self-Contained Design
- **No external dependencies**: All CSS and JavaScript embedded
- **Single file deployment**: Easy to share and use
- **Cross-browser compatibility**: ES6+ features with fallbacks

### Code Organization
```html
<!DOCTYPE html>
<html>
<head>
  <style>/* Embedded CSS */</style>
</head>
<body>
  <!-- HTML Structure -->
  <script>/* Embedded JavaScript */</script>
</body>
</html>
```

## Integration with Net2Sheet

### CSV Format Compatibility
- Must handle Net2Sheet's exact output format
- Support both Japanese and English headers
- Preserve UTF-8 BOM encoding

### Workflow Integration
1. User exports CSV from Net2Sheet extension
2. Opens csv-checker.html in browser
3. Loads and edits CSV data
4. Exports modified CSV for further use

## Testing Guidelines

### Browser Compatibility
- Test on Chrome, Firefox, Safari, Edge
- Verify mobile responsiveness
- Check file upload/download functionality

### Data Validation
- Test with various CSV formats
- Handle malformed CSV gracefully
- Verify image URL validation

### Performance Testing
- Test with large datasets (100, 500, 1000+ images)
- Monitor memory usage during extended sessions
- Validate CSV parsing performance

Refer to [README.md](mdc:README.md) for usage instructions and technical specifications.
