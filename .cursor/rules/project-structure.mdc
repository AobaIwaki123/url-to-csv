---
alwaysApply: true
---

# 画像URLスクレイパー - Project Structure

This is a **comprehensive image URL collection toolkit** consisting of three complementary tools: a Chrome DevTools extension, a CSV image checker, and a standalone web-based URL scraper.

## Project Overview
- **Purpose**: Extract, collect, and manage image URLs from web content with multiple approaches
- **Architecture**: Multi-tool ecosystem for different image collection workflows
- **Target**: Web developers, content managers, and digital asset organizers

## Complete File Structure
```
url-to-csv/
├─ [README.md](mdc:README.md)                             # Project documentation (Japanese)
├─ [header-utils.js](mdc:header-utils.js)                 # Shared utility functions for HTTP headers
├─ [csv-checker.html](mdc:csv-checker.html)               # Standalone CSV image checker tool
├─ [csv-checker.png](mdc:csv-checker.png)                 # Screenshot for CSV Checker tool
├─ [url-to-csv.html](mdc:url-to-csv.html)                 # Standalone web-based URL scraper tool
├─ [url-to-csv.png](mdc:url-to-csv.png)                   # Screenshot for URL to CSV tool
└─ net2sheet/                                             # Chrome extension directory
   ├─ [manifest.json](mdc:net2sheet/manifest.json)       # Chrome extension manifest (MV3)
   ├─ [devtools-page.html](mdc:net2sheet/devtools-page.html) # DevTools entry point
   ├─ [devtools-page.js](mdc:net2sheet/devtools-page.js) # Panel registration script
   ├─ [panel.html](mdc:net2sheet/panel.html)             # DevTools panel UI
   ├─ [panel.js](mdc:net2sheet/panel.js)                 # Main logic for network monitoring & data export
   ├─ [service_worker.js](mdc:net2sheet/service_worker.js) # Background script (minimal implementation)
   └─ icon*.png                                          # Extension icons (16, 48, 128px)
```

## Three-Tool Ecosystem

### 1. Net2Sheet (Chrome Extension)
- **Purpose**: Real-time network monitoring in Chrome DevTools
- **Use Case**: Monitor actual browser requests during page load/navigation
- **Features**: Live collection, CSV export, Google Sheets integration
- **Target**: Developers debugging image loading issues

### 2. CSV Checker (Standalone HTML Tool)
- **Purpose**: Visual inspection and editing of CSV files with image previews
- **Use Case**: Review and refine CSV data generated by Net2Sheet or URL to CSV
- **Features**: Image grid display, inline editing, exclusion controls, modified CSV export
- **Target**: Content managers reviewing collected image data

### 3. URL to CSV (Standalone Web Application)
- **Purpose**: Direct URL-based image extraction without browser extension
- **Use Case**: Extract images from webpage HTML source or manual URL input
- **Features**: HTML parsing, bulk URL processing, CSV generation
- **Target**: Users who prefer web-based tools over extensions

## Shared Components & Patterns

### CSV Format Standardization
All tools use consistent CSV format:
```csv
"ファイル名","URL"
"image1.jpg","https://example.com/images/image1.jpg"
"logo.png","https://cdn.example.com/assets/logo.png"
```

### Image Detection Logic
Consistent image extension detection across tools:
```javascript
const IMAGE_EXTS = new Set([
  ".png", ".jpg", ".jpeg", ".gif", ".webp", 
  ".svg", ".avif", ".bmp", ".ico"
]);
```

### Japanese-First UI
- All user interfaces use Japanese text with emoji icons
- Consistent terminology: 収集, 除外, ダウンロード, CSV出力
- Error messages and feedback in Japanese

## Development Workflows

### Tool Integration Flow
1. **Data Collection**: Use Net2Sheet or URL to CSV to gather image URLs
2. **Data Review**: Import CSV into CSV Checker for visual inspection
3. **Data Refinement**: Edit filenames, exclude unwanted images
4. **Final Export**: Generate refined CSV for downstream use

### Common Use Cases
- **Web Scraping**: Extract all images from target websites
- **Asset Audit**: Review image resources loaded by web applications
- **Content Migration**: Prepare image lists for content management systems
- **SEO Analysis**: Analyze image resources across competitor websites

## Development Focus Areas
- **Cross-tool compatibility**: Ensure CSV format consistency
- **User experience**: Seamless workflow between different tools
- **Performance**: Efficient handling of large image datasets
- **Accessibility**: Screen reader friendly interfaces
- **Localization**: Complete Japanese language support

Refer to [README.md](mdc:README.md) for detailed usage instructions and tool-specific documentation.
